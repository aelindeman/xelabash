#!/usr/bin/env python3
from concurrent.futures import ThreadPoolExecutor
from passlib import hash
import random
import string

hashes = {
    "plain":  {"fn": hash.plaintext},
    "md5":    {"fn": hash.md5_crypt},
    "sha1":   {"fn": hash.sha1_crypt},
    "sha256": {"fn": hash.sha256_crypt, "args": {"rounds": 5000}},
    "sha512": {"fn": hash.sha512_crypt, "args": {"rounds": 5000}}
}


def make_password() -> string:
    return "".join(random.choice(string.ascii_letters + string.digits) for char in range(32))


def make_hash(source, hash_config):
    hash_fn = hash_config["fn"]
    hash_args = hash_config["args"] if "args" in hash_config else {}
    return lambda: hash_fn.using(**hash_args if hash_args else {}).hash(source)


def display(k, v):
    print("{: <8} {}".format(k, v))


if __name__ == '__main__':
    import sys
    password = sys.argv[1] if len(sys.argv) > 1 else make_password()

    def parallelize(tasks):
        with ThreadPoolExecutor(max_workers=len(hashes)) as executor:
            running_tasks = {task_name: executor.submit(task) for task_name, task in tasks.items()}
            for running_task_name, running_task in running_tasks.items():
                display(running_task_name, running_task.result())

    parallelize({hash_name: make_hash(password, hash_config)
                 for hash_name, hash_config in hashes.items()})
